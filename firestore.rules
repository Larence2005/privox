
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == userId;
    }

    match /chats/{chatId} {
      // A user can read a chat document IF their UID is in the participantUids array.
      // This is the standard, secure way to protect queries using 'array-contains'.
      allow read: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      
      // A user can create a chat IF they are a participant in the new chat.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participantUids;
      
      // A user can update a chat's metadata (e.g. lastMessage) IF they are a participant.
      allow update: if isSignedIn() && request.auth.uid in resource.data.participantUids;
      
      // Deleting chats is handled by a batch job or Cloud Function, not directly by users.
      allow delete: if false;

      match /messages/{messageId} {
        // To read/write messages, the user must be a participant in the parent chat.
        // The `get()` call here is efficient as it's evaluated against cached data.
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
      }
    }
  }
}
