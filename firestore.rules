
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /users/{userId} {
      // Any authenticated user can read public user profiles. This is needed to show
      // the other user's name and avatar in the chat list.
      allow read: if request.auth.uid != null;
      
      // A user can only create, update, or delete their own user document.
      allow write: if request.auth.uid == userId;
    }

    // A user can query and read a chat document if they are a participant.
    match /chats/{chatId} {
      allow read, update: if request.auth.uid in resource.data.participantUids;

      // Anyone authenticated can create a chat, but they must be one of the participants,
      // and the participant list must contain exactly 2 users.
      allow create: if request.auth.uid != null &&
                      request.auth.uid in request.resource.data.participantUids &&
                      request.resource.data.participantUids.size() == 2;

      // Only participants can delete a chat.
      allow delete: if request.auth.uid in resource.data.participantUids;

      // Rules for the messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a participant of the parent chat.
        // This uses a `get()` to check the parent document.
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]);

        // Allow create if user is a participant and the message is from them.
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids.hasAny([request.auth.uid]) &&
                       request.resource.data.uid == request.auth.uid;
        
        // Messages are immutable and cannot be updated or deleted through the client.
        allow update, delete: if false;
      }
    }
  }
}
