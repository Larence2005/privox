
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isParticipantInResource() {
      return isSignedIn() && resource.data.participantUids.hasAny([request.auth.uid]);
    }
    
    function isParticipantInRequest() {
      return isSignedIn() && request.resource.data.participantUids.hasAny([request.auth.uid]);
    }

    function isParticipant(chatId) {
      let chatDoc = get(/databases/$(database)/documents/chats/$(chatId));
      return isSignedIn() && chatDoc.data.participantUids.hasAny([request.auth.uid]);
    }

    // --- User Profile Rules ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isUser(userId);
    }

    // --- Chat Rules ---
    match /chats/{chatId} {
      // A query must be constrained by the client to only request chats
      // the user is a part of. The get rule below will be enforced on every
      // document returned by the list operation.
      allow list: if isSignedIn();
      allow get: if isParticipantInResource();
      
      allow create: if isParticipantInRequest() && request.resource.data.participantUids.size() == 2;
      
      allow update, delete: if isParticipantInResource();

      // --- Message Subcollection Rules ---
      match /messages/{messageId} {
        allow read, create: if isParticipant(chatId);
        allow update, delete: if false; // Messages are immutable
      }
    }
  }
}
