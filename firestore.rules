rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Checks if the requesting user is a participant in an *existing* chat.
    function isParticipant(chatId) {
      let chatDoc = get(/databases/$(database)/documents/chats/$(chatId));
      return isSignedIn() &&
             chatDoc.data.participantUids is list &&
             request.auth.uid in chatDoc.data.participantUids;
    }
    
    // --- Collection Rules ---

    // USERS collection
    match /users/{userId} {
      // Any authenticated user can read public profile data.
      allow read: if isSignedIn();
      // Only the user themself can create or update their own profile.
      allow write: if isUser(userId);
    }

    // CHATS collection
    match /chats/{chatId} {
      // Allow read if the user is a participant.
      // This rule is enforced by Firestore on every document returned by a query.
      allow read: if isParticipant(chatId);

      // Allow a user to CREATE a chat if they are one of the two participants.
      // This rule inspects the data being sent in the request.
      allow create: if isSignedIn()
                     && request.resource.data.participantUids is list
                     && request.resource.data.participantUids.size() == 2
                     && request.auth.uid in request.resource.data.participantUids;
      
      // Allow a user to UPDATE a chat (e.g., for new messages) if they are a participant.
      // This rule inspects the existing data on the server.
      allow update: if isParticipant(chatId);

      // Disallow deleting chats for now.
      allow delete: if false;

      // MESSAGES subcollection
      match /messages/{messageId} {
        // A user can read/write messages in a chat if they are a participant.
        allow read, write: if isParticipant(chatId);
      }
    }
  }
}
