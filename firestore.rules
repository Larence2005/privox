
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a participant in a chat by reading the parent chat doc
    function isParticipant(chatId) {
      return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
    }

    // Users: Any logged-in user can read public profiles. Only the owner can create, update, or delete their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }

    // Chats: Access is determined by participation.
    match /chats/{chatId} {
      // Helper function to check participation for a specific chat document.
      // It ensures the participantUids field exists before checking membership.
      function isChatParticipant() {
        return 'participantUids' in resource.data && request.auth.uid in resource.data.participantUids;
      }

      // Read, update, and delete are allowed only if the user is a participant.
      // This rule now safely handles queries.
      allow read, update, delete: if isChatParticipant();
      
      // Create is allowed if the user includes their own UID in the new chat.
      allow create: if request.auth.uid in request.resource.data.participantUids;

      // Messages subcollection: Access is inherited from the parent chat.
      match /messages/{messageId} {
        allow read, create: if isParticipant(chatId);
      }
    }
  }
}
