
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, no one can read or write to the database.
    // We will open up access to specific collections below.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    // Controls access to user profile data.
    match /users/{userId} {
      // Any authenticated user can read a user's public profile (displayName, photoURL).
      // This is needed to display chat participant information.
      allow read: if request.auth != null;

      // A user can create their own profile document, but only if they are logged in
      // and the document ID matches their user ID.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can only update their own profile information.
      allow update: if request.auth != null && request.auth.uid == userId;

      // Users should not be able to delete other users' profiles.
      // Account deletion should be handled by a secure server-side function.
      // We allow a user to delete their own document for now.
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    // Chats collection
    // Controls access to chat metadata.
    match /chats/{chatId} {
      // To read or write to a chat document (including its messages),
      // the requesting user's ID must be in the `participantUids` array.
      function isParticipant() {
        return request.auth.uid in resource.data.participantUids;
      }
      
      // Allow read, update, and delete if the user is a participant.
      allow read, update, delete: if request.auth != null && isParticipant();
      
      // Allow creation of a new chat if the user's ID is one of the participants.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participantUids;

      // Messages subcollection
      // Controls access to the actual messages within a chat.
      match /messages/{messageId} {
        // To read or write messages, the user must be a participant
        // in the parent chat document. We check this by using get().
        function isParentChatParticipant() {
          return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantUids;
        }

        // Allow read, write, and delete if the user is part of the chat.
        allow read, write, delete: if request.auth != null && isParentChatParticipant();
      }
    }
  }
}
